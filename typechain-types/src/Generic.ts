/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GenericInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_ADMIN"
      | "ROLE_FOUR"
      | "ROLE_MANUFACTURER"
      | "ROLE_ONE"
      | "ROLE_THREE"
      | "ROLE_TWO"
      | "STATE_FIVE"
      | "STATE_FOUR"
      | "STATE_ONE"
      | "STATE_THREE"
      | "STATE_TWO"
      | "_roles"
      | "addAllowedFunctionForState"
      | "addNextStateForState"
      | "addRoleForState"
      | "checkAllowedRoles"
      | "entityURI"
      | "getAllStates"
      | "getCurrentState"
      | "getHistory"
      | "getHistoryLength"
      | "getNextStates"
      | "getRoleAdmin"
      | "getRoles"
      | "getState"
      | "grantRole"
      | "grantRoleToAccount"
      | "hasRole"
      | "history"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transitionState"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_FOUR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANUFACTURER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_THREE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_TWO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "STATE_FIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATE_FOUR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STATE_ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "STATE_THREE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STATE_TWO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_roles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedFunctionForState",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addNextStateForState",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleForState",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowedRoles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entityURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextStates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(functionFragment: "getState", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleToAccount",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transitionState",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROLE_FOUR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANUFACTURER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROLE_THREE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROLE_TWO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STATE_FIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STATE_FOUR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STATE_ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STATE_THREE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STATE_TWO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedFunctionForState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNextStateForState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleForState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowedRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entityURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitionState",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransitionEvent {
  export type InputTuple = [
    sender: AddressLike,
    fromState: BytesLike,
    toState: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    fromState: string,
    toState: string
  ];
  export interface OutputObject {
    sender: string;
    fromState: string;
    toState: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Generic extends BaseContract {
  connect(runner?: ContractRunner | null): Generic;
  waitForDeployment(): Promise<this>;

  interface: GenericInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ROLE_ADMIN: TypedContractMethod<[], [string], "view">;

  ROLE_FOUR: TypedContractMethod<[], [string], "view">;

  ROLE_MANUFACTURER: TypedContractMethod<[], [string], "view">;

  ROLE_ONE: TypedContractMethod<[], [string], "view">;

  ROLE_THREE: TypedContractMethod<[], [string], "view">;

  ROLE_TWO: TypedContractMethod<[], [string], "view">;

  STATE_FIVE: TypedContractMethod<[], [string], "view">;

  STATE_FOUR: TypedContractMethod<[], [string], "view">;

  STATE_ONE: TypedContractMethod<[], [string], "view">;

  STATE_THREE: TypedContractMethod<[], [string], "view">;

  STATE_TWO: TypedContractMethod<[], [string], "view">;

  _roles: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addAllowedFunctionForState: TypedContractMethod<
    [state: BytesLike, allowedFunction: BytesLike],
    [void],
    "nonpayable"
  >;

  addNextStateForState: TypedContractMethod<
    [state: BytesLike, nextState: BytesLike],
    [void],
    "nonpayable"
  >;

  addRoleForState: TypedContractMethod<
    [state: BytesLike, role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  checkAllowedRoles: TypedContractMethod<[role: BytesLike], [boolean], "view">;

  entityURI: TypedContractMethod<[entityId: BigNumberish], [string], "view">;

  getAllStates: TypedContractMethod<[], [string[]], "view">;

  getCurrentState: TypedContractMethod<[], [string], "view">;

  getHistory: TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, string, bigint] & {
        fromState: string;
        toState: string;
        actor: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getHistoryLength: TypedContractMethod<[], [bigint], "view">;

  getNextStates: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoles: TypedContractMethod<[], [string[]], "view">;

  getState: TypedContractMethod<
    [state: BytesLike],
    [
      [string, string[], string[], string[], string] & {
        name: string;
        nextStates: string[];
        allowedRoles: string[];
        allowedFunctions: string[];
        preFunction: string;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRoleToAccount: TypedContractMethod<
    [roleName: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  history: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        fromState: string;
        toState: string;
        actor: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transitionState: TypedContractMethod<
    [toState: BytesLike, role: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_FOUR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_MANUFACTURER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ONE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_THREE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_TWO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATE_FIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATE_FOUR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATE_ONE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATE_THREE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATE_TWO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_roles"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addAllowedFunctionForState"
  ): TypedContractMethod<
    [state: BytesLike, allowedFunction: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNextStateForState"
  ): TypedContractMethod<
    [state: BytesLike, nextState: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addRoleForState"
  ): TypedContractMethod<
    [state: BytesLike, role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkAllowedRoles"
  ): TypedContractMethod<[role: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "entityURI"
  ): TypedContractMethod<[entityId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllStates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentState"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHistory"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, string, bigint] & {
        fromState: string;
        toState: string;
        actor: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoryLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextStates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoles"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<
    [state: BytesLike],
    [
      [string, string[], string[], string[], string] & {
        name: string;
        nextStates: string[];
        allowedRoles: string[];
        allowedFunctions: string[];
        preFunction: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRoleToAccount"
  ): TypedContractMethod<
    [roleName: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "history"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        fromState: string;
        toState: string;
        actor: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transitionState"
  ): TypedContractMethod<
    [toState: BytesLike, role: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transition"
  ): TypedContractEvent<
    TransitionEvent.InputTuple,
    TransitionEvent.OutputTuple,
    TransitionEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transition(address,bytes32,bytes32)": TypedContractEvent<
      TransitionEvent.InputTuple,
      TransitionEvent.OutputTuple,
      TransitionEvent.OutputObject
    >;
    Transition: TypedContractEvent<
      TransitionEvent.InputTuple,
      TransitionEvent.OutputTuple,
      TransitionEvent.OutputObject
    >;
  };
}
